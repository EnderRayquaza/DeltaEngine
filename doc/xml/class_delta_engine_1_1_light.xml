<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="class_delta_engine_1_1_light" kind="class" language="C++" prot="public">
    <compoundname>DeltaEngine::Light</compoundname>
    <includes refid="_delta_engine_8hpp" local="no">DeltaEngine.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_delta_engine_1_1_light_1a93efcd6af15f89ca4b223605362bf6aa" prot="public" static="no" mutable="no">
        <type>friend</type>
        <definition>friend DeltaEngine::Light::Game</definition>
        <argsstring></argsstring>
        <name>Game</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="499" column="8" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" bodystart="499" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_delta_engine_1_1_light_1acfced0710c813a848091ede706695df4" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double DeltaEngine::Light::m_radius</definition>
        <argsstring></argsstring>
        <name>m_radius</name>
        <briefdescription>
<para>Its radius in px. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="512" column="8" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_delta_engine_1_1_light_1ab0652ec5c1a4b209fd4e78b58cd37d3a" prot="protected" static="no" mutable="no">
        <type>sf::VertexArray</type>
        <definition>sf::VertexArray DeltaEngine::Light::m_vertexArray</definition>
        <argsstring></argsstring>
        <name>m_vertexArray</name>
        <briefdescription>
<para>An Array with all the vertices of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="513" column="17" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_delta_engine_1_1_light_1ac28279cfc35ce7d2ccf8b01a273eca57" prot="protected" static="no" mutable="no">
        <type>sf::Vector2f</type>
        <definition>sf::Vector2f DeltaEngine::Light::m_position</definition>
        <argsstring></argsstring>
        <name>m_position</name>
        <briefdescription>
<para>Its positon in px. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="514" column="14" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_delta_engine_1_1_light_1a40d9df2c826f7ce0ea20d6cfb015a524" prot="protected" static="no" mutable="no">
        <type>sf::Color</type>
        <definition>sf::Color DeltaEngine::Light::m_color</definition>
        <argsstring></argsstring>
        <name>m_color</name>
        <briefdescription>
<para>The color of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="515" column="11" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_delta_engine_1_1_light_1aab425e8b17a3380a6f229f862ed11b91" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double DeltaEngine::Light::m_intensity</definition>
        <argsstring></argsstring>
        <name>m_intensity</name>
        <briefdescription>
<para>The intensity/brightness of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="516" column="8" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_delta_engine_1_1_light_1af0edeba9fd8b70f6d7319114aadbdbae" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DeltaEngine::Light::m_directed</definition>
        <argsstring></argsstring>
        <name>m_directed</name>
        <briefdescription>
<para>If the light is a directed light. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="518" column="6" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_delta_engine_1_1_light_1a48338cbc371ac9631473344eb1aa598b" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double DeltaEngine::Light::m_abscissa_angle</definition>
        <argsstring></argsstring>
        <name>m_abscissa_angle</name>
        <briefdescription>
<para>The angle between the axe of abscissa and the light. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="521" column="8" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_delta_engine_1_1_light_1a1077b81e40b6c5dbefff4f510e47d070" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double DeltaEngine::Light::m_opening_angle</definition>
        <argsstring></argsstring>
        <name>m_opening_angle</name>
        <briefdescription>
<para>The angle between the first and last ray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="522" column="8" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" bodystart="522" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_delta_engine_1_1_light_1a4a514d2b6f87b4a4e5cdcc801ecd163f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DeltaEngine::Light::Light</definition>
        <argsstring>()=delete</argsstring>
        <name>Light</name>
        <briefdescription>
<para>Deleted Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Deleted constructor. Don&apos;t use it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_delta_engine_1_1_light_1a1d629510af6119dbe9692326ee3745da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DeltaEngine::Light::Light</definition>
        <argsstring>(double radius, int vertices, sf::Vector2f position, sf::Color color=sf::Color(255, 255, 255), double intensity=255)</argsstring>
        <name>Light</name>
        <param>
          <type>double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>sf::Vector2f</type>
          <declname>position</declname>
        </param>
        <param>
          <type>sf::Color</type>
          <declname>color</declname>
          <defval>sf::Color(255, 255, 255)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>intensity</declname>
          <defval>255</defval>
        </param>
        <briefdescription>
<para>Constructor for classic Lights. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>(double) The radius of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) The number of vertices in the cirle. More improves quality, but dicrease perfs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>(sf::Vector2f) The position of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref> (center of the circle). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>(sf::Color) The color of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intensity</parametername>
</parameternamelist>
<parameterdescription>
<para>(double) The intensity/brightness of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
Use this constructor for circles <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="492" column="1" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.cpp" bodystart="465" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="class_delta_engine_1_1_light_1a69f1b1f44385658331038fcc30c38b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DeltaEngine::Light::Light</definition>
        <argsstring>(double radius, int vertices, sf::Vector2f position, double abscissa_angle, double opening_angle, sf::Color color=sf::Color(255, 255, 255), double intensity=255)</argsstring>
        <name>Light</name>
        <param>
          <type>double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>sf::Vector2f</type>
          <declname>position</declname>
        </param>
        <param>
          <type>double</type>
          <declname>abscissa_angle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>opening_angle</declname>
        </param>
        <param>
          <type>sf::Color</type>
          <declname>color</declname>
          <defval>sf::Color(255, 255, 255)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>intensity</declname>
          <defval>255</defval>
        </param>
        <briefdescription>
<para>Constructor for directed Lights. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>(double) The radius of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertices</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) The number of vertices in the cirle. More improves quality, but dicrease perfs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>(sf::Vector2f) The position of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref> (center of the circle). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>abscissa_angle</parametername>
</parameternamelist>
<parameterdescription>
<para>(double) The angle between the abscissa axis and the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opening_angle</parametername>
</parameternamelist>
<parameterdescription>
<para>(double) Tha angle between the first and last ray. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>(sf::Color) The color of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intensity</parametername>
</parameternamelist>
<parameterdescription>
<para>(double) The intensity/brightness of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
Use this constructor for directionals <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="494" column="1" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.cpp" bodystart="472" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="class_delta_engine_1_1_light_1af5063384becbc45d8df9361f0daa7888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DeltaEngine::Light::~Light</definition>
        <argsstring>()</argsstring>
        <name>~Light</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_delta_engine_1_1_light_1a0164ae8a310689433a1279835f7d233c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sf::VertexArray &amp;</type>
        <definition>sf::VertexArray &amp; DeltaEngine::Light::get_vertexArray</definition>
        <argsstring>()</argsstring>
        <name>get_vertexArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="class_delta_engine_1_1_light_1ab0652ec5c1a4b209fd4e78b58cd37d3a" kindref="member">m_vertexArray()</ref> (sf::VertexArray) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="502" column="17" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.cpp" bodystart="482" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="class_delta_engine_1_1_light_1aa6af9ac3a2d650189ae872fd6198e39f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DeltaEngine::Light::set_position</definition>
        <argsstring>(sf::Vector2f position)</argsstring>
        <name>set_position</name>
        <param>
          <type>sf::Vector2f</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>(sf::Vector2f) The new position of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="505" column="6" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.cpp" bodystart="488" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="class_delta_engine_1_1_light_1af67ac480447a82ce1ede97912d44a0ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DeltaEngine::Light::generate</definition>
        <argsstring>()</argsstring>
        <name>generate</name>
        <briefdescription>
<para>Calculate the render of the <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="508" column="6" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.cpp" bodystart="495" bodyend="513"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class that enlights the <ref refid="class_delta_engine_1_1_game" kindref="compound">Game</ref>. There&apos;re circles <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref> and directional <ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_delta_engine_1_1_light" kindref="compound">Light</ref> enlight the scene. They can be circular or directional and you can change their color and brightness. </para>
    </detaileddescription>
    <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" line="446" column="1" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" bodystart="447" bodyend="523"/>
    <listofallmembers>
      <member refid="class_delta_engine_1_1_light_1a93efcd6af15f89ca4b223605362bf6aa" prot="public" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>Game</name></member>
      <member refid="class_delta_engine_1_1_light_1af67ac480447a82ce1ede97912d44a0ff" prot="public" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>generate</name></member>
      <member refid="class_delta_engine_1_1_light_1a0164ae8a310689433a1279835f7d233c" prot="public" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>get_vertexArray</name></member>
      <member refid="class_delta_engine_1_1_light_1a4a514d2b6f87b4a4e5cdcc801ecd163f" prot="public" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>Light</name></member>
      <member refid="class_delta_engine_1_1_light_1a1d629510af6119dbe9692326ee3745da" prot="public" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>Light</name></member>
      <member refid="class_delta_engine_1_1_light_1a69f1b1f44385658331038fcc30c38b4d" prot="public" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>Light</name></member>
      <member refid="class_delta_engine_1_1_light_1a48338cbc371ac9631473344eb1aa598b" prot="protected" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>m_abscissa_angle</name></member>
      <member refid="class_delta_engine_1_1_light_1a40d9df2c826f7ce0ea20d6cfb015a524" prot="protected" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>m_color</name></member>
      <member refid="class_delta_engine_1_1_light_1af0edeba9fd8b70f6d7319114aadbdbae" prot="protected" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>m_directed</name></member>
      <member refid="class_delta_engine_1_1_light_1aab425e8b17a3380a6f229f862ed11b91" prot="protected" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>m_intensity</name></member>
      <member refid="class_delta_engine_1_1_light_1a1077b81e40b6c5dbefff4f510e47d070" prot="protected" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>m_opening_angle</name></member>
      <member refid="class_delta_engine_1_1_light_1ac28279cfc35ce7d2ccf8b01a273eca57" prot="protected" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>m_position</name></member>
      <member refid="class_delta_engine_1_1_light_1acfced0710c813a848091ede706695df4" prot="protected" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>m_radius</name></member>
      <member refid="class_delta_engine_1_1_light_1ab0652ec5c1a4b209fd4e78b58cd37d3a" prot="protected" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>m_vertexArray</name></member>
      <member refid="class_delta_engine_1_1_light_1aa6af9ac3a2d650189ae872fd6198e39f" prot="public" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>set_position</name></member>
      <member refid="class_delta_engine_1_1_light_1af5063384becbc45d8df9361f0daa7888" prot="public" virt="non-virtual"><scope>DeltaEngine::Light</scope><name>~Light</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

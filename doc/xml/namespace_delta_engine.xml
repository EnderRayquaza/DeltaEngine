<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="namespace_delta_engine" kind="namespace" language="C++">
    <compoundname>DeltaEngine</compoundname>
    <innerclass refid="class_delta_engine_1_1_entity" prot="public">DeltaEngine::Entity</innerclass>
    <innerclass refid="class_delta_engine_1_1_game" prot="public">DeltaEngine::Game</innerclass>
    <innerclass refid="class_delta_engine_1_1_light" prot="public">DeltaEngine::Light</innerclass>
    <innerclass refid="class_delta_engine_1_1_object" prot="public">DeltaEngine::Object</innerclass>
    <innerclass refid="class_delta_engine_1_1_part" prot="public">DeltaEngine::Part</innerclass>
    <innerclass refid="class_delta_engine_1_1_shader_manager" prot="public">DeltaEngine::ShaderManager</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_delta_engine_1a1239ff6b1b712a6f56060b204995cc8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>json</type>
        <definition>json DeltaEngine::returnJson</definition>
        <argsstring>(std::string jsonPath)</argsstring>
        <name>returnJson</name>
        <param>
          <type>std::string</type>
          <declname>jsonPath</declname>
        </param>
        <briefdescription>
<para>Returns a json array from a .json file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jsonPath</parametername>
</parameternamelist>
<parameterdescription>
<para>(std::string) The path of the json file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(json) A json array with all the datas of the file. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.cpp" line="6" column="6" bodyfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.cpp" bodystart="6" bodyend="14" declfile="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.hpp" declline="135" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A 2d engine made with <ulink url="sfml-dev.org">SFML</ulink> (window,render,sound) and <ulink url="box2d.ord">Box2D</ulink> (physics). </para>
    </briefdescription>
    <detaileddescription>
<sect2 id="namespace_delta_engine_1autotoc_md0">
<title>DeltaEngine</title>
<para>It uses multiples classes, firstly <ref refid="class_delta_engine_1_1_game" kindref="compound">Game</ref>, that contains infos about your project (name, version, debug/release mode, etc...) and your <ref refid="class_delta_engine_1_1_object" kindref="compound">Objects</ref>, <ref refid="class_delta_engine_1_1_entity" kindref="compound">Entities</ref>, <ref refid="class_delta_engine_1_1_light" kindref="compound">Lights</ref> and <ref refid="class_delta_engine_1_1_shader_manager" kindref="compound">Shaders</ref>. This class draws everything on the <ref refid="class_delta_engine_1_1_game_1a61e86878be90b835fd10e84a151a322e" kindref="member">window</ref> too.</para>
<para><ref refid="class_delta_engine_1_1_object" kindref="compound">Objects</ref> and <ref refid="class_delta_engine_1_1_entity" kindref="compound">Entities</ref> are pretty the same, but <ref refid="class_delta_engine_1_1_entity" kindref="compound">Entities</ref> can move and <ref refid="class_delta_engine_1_1_object" kindref="compound">Objects</ref> are statics. They&apos;re containers of <ref refid="class_delta_engine_1_1_part" kindref="compound">Parts</ref>.</para>
<para><ref refid="class_delta_engine_1_1_part" kindref="compound">Parts</ref> are a combination of a texture (<ulink url="sfml-dev.org">SFML</ulink>) and an hitbox (<ulink url="box2d.ord">Box2D</ulink>). They can be animated and <ref refid="class_delta_engine_1_1_shader_manager" kindref="compound">Shaders</ref> can be applied on.</para>
<para><ref refid="class_delta_engine_1_1_light" kindref="compound">Lights</ref> enlight the scene. They can be circular or directional and you can change their <ref refid="class_delta_engine_1_1_light_1a40d9df2c826f7ce0ea20d6cfb015a524" kindref="member">color</ref> and <ref refid="class_delta_engine_1_1_light_1aab425e8b17a3380a6f229f862ed11b91" kindref="member">brightness</ref>.</para>
<para><ref refid="class_delta_engine_1_1_shader_manager" kindref="compound">ShaderManagers</ref> manage and stock all your <ref refid="class_delta_engine_1_1_shader_manager" kindref="compound">Shaders</ref>. They&apos;re accessible by their index.</para>
<para>Made by <ulink url="https://github.com/EnderRayquaza,">EnderRayquaza</ulink> / Under MIT Licence.<linebreak/>
Copyright <ref refid="namespace_delta_engine" kindref="compound">DeltaEngine</ref> belong to EnderRayquaza.<linebreak/>
You must quote me if your use my work. Thx. </para>
</sect2>
    </detaileddescription>
    <location file="C:/Users/Utilisateur/Documents/Prog/C++/StaticDeltaEngine/Code/DeltaEngine.cpp" line="4" column="1"/>
  </compounddef>
</doxygen>
